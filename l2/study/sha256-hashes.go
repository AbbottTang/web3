package main

import (
	"crypto/sha256"
	"fmt"
)

/**
sha256.New()创建了一个新的SHA-256哈希对象，该对象实现了hash.Hash接口。

h.Write([]byte(s))将字符串s转换为字节切片，并将其写入哈希对象。这是计算哈希值的第一步。

h.Sum(nil)计算并返回哈希值的二进制表示。参数nil表示不需要额外的字节切片来追加哈希值；
函数会返回一个新的字节切片，其中包含完整的哈希结果。

fmt.Printf("%x\n", bs)使用%x格式说明符将哈希值的字节切片格式化为十六进制字符串，并输出到标准输出。
这是查看哈希值的常用方式。

SHA-256是一种安全的哈希函数，广泛用于密码学、数据完整性验证等领域。
它生成的哈希值具有固定长度（对于SHA-256来说是256位或32字节），并且对于不同的输入几乎总是产生完全不同的哈希值。
*/

func main() {
	s := "sha256 this string1"
	// 创建一个新的SHA-256哈希对象
	h := sha256.New()
	// 将字符串转换为字节切片，并写入哈希对象
	h.Write([]byte(s))
	// 计算哈希值，Sum(nil)会返回一个字节切片，包含哈希结果的二进制表示
	bs := h.Sum(nil)
	// 输出原始字符串
	fmt.Println(s)
	// 输出哈希值的十六进制表示
	fmt.Printf("%x\n", bs)

}
